{"version":3,"sources":["components/parking.tsx","components/parkingLot.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ParkingBlock","props","parking_space","data","width","size","height","linewidth","React","useState","clicks","setClicks","color","setColor","occupied","x","point","y","transform","direction","fill","onClick","colors","num","t","numToColor","console","log","x1","y1","x2","y2","stroke","strokeWidth","ParkingLot","setData","realData","toggle","useEffect","interval","setInterval","new_data","Math","floor","random","length","clearInterval","Container","Row","className","map","value","index","Button","variant","App","i","j","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21e42cc3.chunk.js","sourcesContent":["import { parking } from './datatypes'\nimport React from 'react'\ninterface I {\n    data: parking;\n    size: number;\n}\n\nexport const ParkingBlock:React.FC<I> = (props) => {\n\n    const data = props.data\n\n    const width = props.size\n\n    const height = props.size * 1.5\n\n    const linewidth = props.size / 12.5\n\n    const [clicks, setClicks] = React.useState(0);\n\n    const [color, setColor] = React.useState('rgb(70, 70, 70)');\n\n    const numToColor = (num: number) => {\n        var t = 1 - 1 / (0.1 * num + 1)\n        var colors = [185 * t + 70, 58 * t + 70, -70 * t + 70]\n        return colors\n    }\n\n    const clickHandler = () => {\n        setClicks(clicks + 1)\n        const colors = numToColor(clicks)\n        setColor(`rgb(${colors[0]}, ${colors[1]}, ${colors[2]})`)\n        console.log(clicks)\n    }\n\n    var parking_space: JSX.Element;\n    \n    if (props.data.occupied) {\n        parking_space = <rect x={data.point[0]} y={data.point[1]} width={width} height={height} transform={`rotate(${data.direction})`} fill={'rgb(255,0,0)'}/>\n    }\n\n    else {\n        parking_space = <rect x={data.point[0]} y={data.point[1]} width={width} height={height} transform={`rotate(${data.direction}, ${data.point[0]}, ${data.point[1]})`} fill={color} onClick={clickHandler}/>\n    }\n\n    return (\n        <svg>\n            {parking_space}\n            <line x1={data.point[0]} y1={data.point[1]} x2={data.point[0] + width} y2={data.point[1]} stroke=\"white\" strokeWidth={linewidth} transform={`rotate(${data.direction})`}/>\n            <line x1={data.point[0] + linewidth / 2} y1={data.point[1] - props.size / 25} x2={data.point[0] + linewidth / 2} y2={data.point[1] + height} stroke=\"white\" strokeWidth={linewidth} transform={`rotate(${data.direction})`}/>\n            <line x1={data.point[0] + linewidth / 2} y1={data.point[1] - props.size / 25} x2={data.point[0] + linewidth / 2} y2={data.point[1] + height} stroke=\"white\" strokeWidth={linewidth} transform={`rotate(${data.direction}) translate(${props.size})`}/>\n        </svg>\n    )\n    // (0, 255, 0) => (255, 0, 0) as counts tends to infinity\n    // Map 0 -> infinity to 0 -> 1\n}","import React, { useEffect } from 'react'\nimport { Button, Container, Row } from 'react-bootstrap';\nimport { parking } from './datatypes'\nimport { ParkingBlock } from './parking'\n\n\ninterface I {\n  data: parking[];\n}\n\nexport const ParkingLot:React.FC<I> = (props) => {\n  const [data, setData] = React.useState(props.data);\n  const [realData, toggle] = React.useState(false);\n\n  useEffect(() => {\n      const interval = setInterval(() => {\n        if (!realData) {\n          var new_data = [...data]\n          new_data[Math.floor(Math.random() * new_data.length)].occupied = true;\n          new_data[Math.floor(Math.random() * new_data.length)].occupied = false;\n          setData(new_data)\n        }\n      //code goes here that will be run every 5 seconds.    \n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, [realData, data]);\n\n  return <Container>\n    <Row className=\"justify-content-md-center pt-3\">\n      <svg width={\"100%\"} height={450}>\n      {data.map((value: parking, index: number) => {\n      return <ParkingBlock data={value} size={75} key={index}></ParkingBlock>\n      })}\n      </svg>\n      </Row>\n    <Row className=\"justify-content-md-center pt-3\">\n      <Button variant=\"dark\" onClick={() => toggle(!realData)}> Toggle Real Data </Button>\n    </Row>\n  </Container>\n}","import React from 'react';\nimport './App.css';\nimport { parking } from './components/datatypes'\nimport { ParkingLot } from './components/parkingLot'\n\nfunction App() {\n  const data: parking[] = []\n\n\n  // initialize parking\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 15; j++) {\n      data.push({'point': [75 * j, 50 + 125 * i], 'direction': 0, 'occupied': false})\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ParkingLot data={data}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}