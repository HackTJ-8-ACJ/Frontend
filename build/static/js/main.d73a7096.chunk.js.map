{"version":3,"sources":["components/parking.tsx","components/parkingLot.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ParkingBlock","props","parking_space","data","width","size","height","React","useState","clicks","setClicks","color","setColor","occupied","x","point","y","transform","direction","fill","onClick","colors","num","t","numToColor","console","log","x1","y1","x2","y2","stroke","strokeWidth","ParkingLot","map","value","index","App","i","j","push","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d73a7096.chunk.js","sourcesContent":["import { parking } from './datatypes'\nimport React from 'react'\ninterface I {\n    data: parking;\n    size: number;\n}\n\nexport const ParkingBlock:React.FC<I> = (props) => {\n\n    const data = props.data\n\n    const width = props.size\n\n    const height = props.size * 1.5\n\n    const [clicks, setClicks] = React.useState(0);\n\n    const [color, setColor] = React.useState('rgb(70, 70, 70)');\n\n    const numToColor = (num: number) => {\n        var t = 1 - 1 / (0.1 * num + 1)\n        var colors = [185 * t + 70, 58 * t + 70, -70 * t + 70]\n        return colors\n    }\n\n    var parking_space: JSX.Element;\n    \n    if (props.data.occupied) {\n        parking_space = <rect x={data.point[0]} y={data.point[1]} width={width} height={height} transform={`rotate(${data.direction}, ${data.point[0]}, ${data.point[1]})`} fill={'rgb(255,0,0)'}/>\n    }\n\n    else {\n        parking_space = <rect x={data.point[0]} y={data.point[1]} width={width} height={height} transform={`rotate(${data.direction}, ${data.point[0]}, ${data.point[1]})`} fill={color} onClick={() => \n            {\n                setClicks(clicks + 1)\n                const colors = numToColor(clicks)\n                setColor(`rgb(${colors[0]}, ${colors[1]}, ${colors[2]})`)\n                console.log(clicks)\n            }}/>\n    }\n\n    return (\n        <svg>\n            <line x1={data.point[0]} y1={data.point[1]} x2={data.point[0] + width} y2={data.point[1]} stroke=\"white\" strokeWidth={props.size / 12.5} transform={`rotate(${data.direction}, ${data.point[0]}, ${data.point[1]})`}/>\n            <line x1={data.point[0]} y1={data.point[1] - props.size / 25} x2={data.point[0]} y2={data.point[1] + height} stroke=\"white\" strokeWidth={props.size / 12.5} transform={`rotate(${data.direction}, ${data.point[0]}, ${data.point[1]})`}/>\n            <line x1={data.point[0]} y1={data.point[1] - props.size / 25} x2={data.point[0]} y2={data.point[1] + height} stroke=\"white\" strokeWidth={props.size / 12.5} transform={`rotate(${data.direction}, ${data.point[0]}, ${data.point[1]}) translate(${props.size})`}/>\n\n            {parking_space}\n\n        </svg>\n    )\n    // (0, 255, 0) => (255, 0, 0) as counts tends to infinity\n    // Map 0 -> infinity to 0 -> 1\n}","import { parking } from './datatypes'\nimport { ParkingBlock } from './parking'\n\nexport function ParkingLot(props: any) {\n\n  return <svg width=\"1000\" height=\"1000\">\n    {props.data.map((value: parking, index: number) => {\n      return <ParkingBlock data={value} size={75} key={index}></ParkingBlock>\n    })}\n  </svg>\n}","import React from 'react';\nimport './App.css';\nimport { parking } from './components/datatypes'\nimport { ParkingLot } from './components/parkingLot'\n\nfunction App() {\n  const data: parking[] = []\n\n\n  // initialize parking\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 10; j++) {\n      data.push({'point': [50 + 75 * j, 50 + 125 * i], 'direction': 0, 'occupied': false})\n    }\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ParkingLot data={data}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}